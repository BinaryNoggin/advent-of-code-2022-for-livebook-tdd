# Advent of Code 2022 day 7 for TDD

## How to use this livebook

Get started on the Advent Of Code challenges using TDD. We at [Binary Noggin](https://binarynoggin.com/) have already setup the failing tests for you. If you want to submit answers and get credit, you will need to create an account on the [advent of code website.](https://adventofcode.com/)

Happy Coding!

## Problem Statement, and part 1

### Day 7: No Space Left On Device

You can hear birds chirping and raindrops hitting leaves as the expedition proceeds. Occasionally, you can even hear much louder sounds in the distance; how big do the animals get out here, anyway?

The device the Elves gave you has problems with more than just its communication system. You try to run a system update:

```
$ system-update --please --pretty-please-with-sugar-on-top
Error: No space left on device
Perhaps you can delete some files to make space for the update?
```

You browse around the filesystem to assess the situation and save the resulting terminal output (your puzzle input). For example:

```
$ cd /
$ ls
dir a
14848514 b.txt
8504156 c.dat
dir d
$ cd a
$ ls
dir e
29116 f
2557 g
62596 h.lst
$ cd e
$ ls
584 i
$ cd ..
$ cd ..
$ cd d
$ ls
4060174 j
8033020 d.log
5626152 d.ext
7214296 k
```

The filesystem consists of a tree of files (plain data) and directories (which can contain other directories or files). The outermost directory is called /. You can navigate around the filesystem, moving into or out of directories and listing the contents of the directory you're currently in.

Within the terminal output, lines that begin with ```$``` are **commands you executed**, very much like some modern computers:

```cd``` means **change directory**. This changes which directory is the current directory, but the specific result depends on the argument:
```cd x``` moves **in** one level: it looks in the current directory for the directory named ```x``` and makes it the current directory.
```cd ..``` moves **out** one level: it finds the directory that contains the current directory, then makes that directory the current directory.
```cd /``` switches the current directory to the outermost directory, ```/```.
```ls``` means **list**. It prints out all of the files and directories immediately contained by the current directory:
```123 abc``` means that the current directory contains a file named ```abc``` with size ```123```.
```dir xyz``` means that the current directory contains a directory named ```xyz```.
Given the commands and output in the example above, you can determine that the filesystem looks visually like this:

```
- / (dir)
  - a (dir)
    - e (dir)
      - i (file, size=584)
    - f (file, size=29116)
    - g (file, size=2557)
    - h.lst (file, size=62596)
  - b.txt (file, size=14848514)
  - c.dat (file, size=8504156)
  - d (dir)
    - j (file, size=4060174)
    - d.log (file, size=8033020)
    - d.ext (file, size=5626152)
    - k (file, size=7214296)
```

Here, there are four directories: ```/``` (the outermost directory), ```a``` and ```d``` (which are in ```/```), and ```e``` (which is in ```a```). These directories also contain files of various sizes.

Since the disk is full, your first step should probably be to find directories that are good candidates for deletion. To do this, you need to determine the **total size** of each directory. The total size of a directory is the sum of the sizes of the files it contains, directly or indirectly. (Directories themselves do not count as having any intrinsic size.)

The total sizes of the directories above can be found as follows:

The total size of directory ```e``` is **584** because it contains a single file ```i``` of size **584** and no other directories.
The directory ```a``` has total size **94853** because it contains files ```f``` (size **29116**), ```g``` (size **2557**), and ```h.lst``` (size **62596**), plus file ```i``` indirectly (a contains ```e``` which contains ```i```).
Directory ```d``` has total size **24933642**.
As the outermost directory, ```/``` contains every file. Its total size is **48381165**, the sum of the size of every file.
To begin, find all of the directories with a total size of **at most 100000**, then calculate the sum of their total sizes. In the example above, these directories are ```a``` and ```e```; the sum of their total sizes is ```95437``` (94853 + 584). (As in this example, this process can count files more than once!)

Find all of the directories with a total size of at most 100000. **What is the sum of the total sizes of those directories?**

```elixir
defmodule DaySevenPuzzleOne do
  defstruct [:current_path, :size]
  # implement a constructor
  def new() do
    # Implement new
  end

  # implement reducers here
  def evaluate_line(command, state) do
  end

  # implement converter here
  def to_sum(state) do
  end

  def solve_one(input_string) do
    # Implement solve_one
  end
end
```

## Test

```elixir
ExUnit.start(auto_run: false)

defmodule DaySevenPuzzleOneTest do
  use ExUnit.Case, async: false

  @input_string """
  $ cd /
  $ ls
  dir a
  14848514 b.txt
  8504156 c.dat
  dir d
  $ cd a
  $ ls
  dir e
  29116 f
  2557 g
  62596 h.lst
  $ cd e
  $ ls
  584 i
  $ cd ..
  $ cd ..
  $ cd d
  $ ls
  4060174 j
  8033020 d.log
  5626152 d.ext
  7214296 k
  """

  test "initialize a data structure that is a convenient accumulator" do
    expected = %DaySevenPuzzleOne{current_path: [], size: %{}}
    actual = DaySevenPuzzleOne.new()
    assert actual == expected
  end

  describe "evaluate a line of text with reducers" do
    test "handles change directory command" do
      struct = DaySevenPuzzleOne.new()
      line = "$ cd /"
      expected = %DaySevenPuzzleOne{current_path: ["/"], size: %{}}
      actual = DaySevenPuzzleOne.evaluate_line(line, struct)
      assert actual == expected
    end

    test "handles going back a directory" do
      struct = %DaySevenPuzzleOne{current_path: ["a", "/"], size: %{["/"] => 0}}
      line = "$ cd .."
      expected = %DaySevenPuzzleOne{current_path: ["/"], size: %{["/"] => 0}}
      actual = DaySevenPuzzleOne.evaluate_line(line, struct)
      assert actual == expected
    end

    test "add file size to all directories" do
      struct = %DaySevenPuzzleOne{current_path: ["a", "/"], size: %{}}
      line = "14848514 b.txt"

      expected = %DaySevenPuzzleOne{
        current_path: ["a", "/"],
        size: %{["/"] => 14_848_514, ["a", "/"] => 14_848_514}
      }

      actual = DaySevenPuzzleOne.evaluate_line(line, struct)
      assert actual == expected
    end

    test "lines that do not effect state are ignored gracefully" do
      struct = %DaySevenPuzzleOne{
        current_path: ["d", "c", "b", "a", "/"],
        size: %{}
      }

      lines = ["$ ls", "dir holyrustedmetalbatman"]
      expected = struct

      Enum.each(lines, fn line ->
        assert DaySevenPuzzleOne.evaluate_line(line, struct) == expected
      end)
    end
  end

  describe "converts struct to number" do
    test "returns the sum of all directory sizes less than or equal to 100_000" do
      struct = %DaySevenPuzzleOne{
        current_path: [],
        size: %{["d", "/"] => 100_000, ["c", "/"] => 1, ["/"] => 100_001}
      }

      assert DaySevenPuzzleOne.to_sum(struct) == 100_001
    end
  end

  describe "solve part 1" do
    test "find the sum of all of the directories with a total size of at most 100_000" do
      assert DaySevenPuzzleOne.solve_one(@input_string) == 95_437
    end

    test "handles nested directories" do
      # - /.          - 100
      # -- a (dir)    - 50
      # --- b.txt 50
      # -- b (dir)    - 50
      # --- a (dir)   - 50
      # ---- c.txt 50

      input = """
      $ cd /
      $ cd a
      $ ls
      50 b.txt
      $ cd ..
      $ cd b
      $ cd a
      50 c.txt
      """

      assert DaySevenPuzzleOne.solve_one(input) == 250
    end
  end
end

ExUnit.run()
```

```elixir
ExUnit.start(auto_run: false)

defmodule DaySevenPuzzleTwoTest do
  use ExUnit.Case, async: false

  @input_string """
  """

  describe "part 2" do
    test "" do
      # add test here
    end
  end
end

ExUnit.run()
```

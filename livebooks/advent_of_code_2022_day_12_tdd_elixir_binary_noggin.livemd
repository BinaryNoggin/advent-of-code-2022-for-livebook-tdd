# Advent of Code 2022 day 12 for TDD

## How to use this livebook

Get started on the Advent Of Code challenges using TDD. We at [Binary Noggin](https://binarynoggin.com/) have already setup the failing tests for you. If you want to submit answers and get credit, you will need to create an account on the [advent of code website.](https://adventofcode.com/)

Happy Coding!

## Problem Statement, and part 1

### Day 12: Hill Climbing Algorithm

You try contacting the Elves using your handheld device, but the river you're following must be too low to get a decent signal.

You ask the device for a heightmap of the surrounding area (your puzzle input). The heightmap shows the local area from above broken into a grid; the elevation of each square of the grid is given by a single lowercase letter, where a is the lowest elevation, b is the next-lowest, and so on up to the highest elevation, z.

Also included on the heightmap are marks for your current position (S) and the location that should get the best signal (E). Your current position (S) has elevation a, and the location that should get the best signal (E) has elevation z.

You'd like to reach E, but to save energy, you should do it in **as few steps as possible**. During each step, you can move exactly one square up, down, left, or right. To avoid needing to get out your climbing gear, the elevation of the destination square can be **at most one higher** than the elevation of your current square; that is, if your current elevation is m, you could step to elevation n, but not to elevation o. (This also means that the elevation of the destination square can be much lower than the elevation of your current square.)

For example:

```
Sabqponm
abcryxxl
accszExk
acctuvwj
abdefghi
```

Here, you start in the top-left corner; your goal is near the middle. You could start by moving down or right, but eventually you'll need to head toward the e at the bottom. From there, you can spiral around to the goal:

```
v..v<<<<
>v.vv<<^
.>vv>E^^
..v>>>^^
..>>>>>^
```

In the above diagram, the symbols indicate whether the path exits each square moving up (^), down (v), left (<), or right (>). The location that should get the best signal is still E, and . marks unvisited squares.

This path reaches the goal in **31** steps, the fewest possible.

**What is the fewest steps required to move from your current position to the location that should get the best signal?**

```elixir
defmodule DayTwelvePuzzleOne do
  defstruct []

  # implement a constructor
  def new(opts \\ %{}) do
    struct(%__MODULE__{}, opts)
  end

  # implement reducers here

  # implement converter here

  def solve_one(input_string) do
  end
end
```

## Test

```elixir
ExUnit.start(auto_run: false)

defmodule DayTwelvePuzzleOneTest do
  use ExUnit.Case, async: false

  @input_string """
  Sabqponm
  abcryxxl
  accszExk
  acctuvwj
  abdefghi
  """

  describe "solve part 1" do
    test "What is the fewest steps required to move from your current position to the location that should get the best signal?" do
      assert DayTwelvePuzzleOne.solve_one(@input_string) == 31
    end
  end
end

ExUnit.run()
```

```elixir
ExUnit.start(auto_run: false)

defmodule DayTwelvePuzzleTwoTest do
  use ExUnit.Case, async: false

  @input_string """
  """

  describe "part 2" do
    test "" do
      # add test here
    end
  end
end

ExUnit.run()
```
